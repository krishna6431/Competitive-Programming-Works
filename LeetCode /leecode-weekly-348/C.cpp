
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    long long matrixSumQueries(int n, vector<vector<int>> &queries)
    {
        int time = 1;
        map<int, pair<int, pair<int, int>>> mp;
        for (int i = 0; i < queries.size(); i++)
        {
            int type = queries[i][0];
            int index = queries[i][1];
            int value = queries[i][2];
            if (type == 0)
            {
                mp[time++] = {index, {0, value}};
            }
            else
            {
                mp[time++] = {index, {1, value}};
            }
        }
        // for (auto x : mp)
        // {
        //     cout << x.first << " : " << x.second.first << " " << x.second.second.first << " " << x.second.second.second << endl;
        // }
        vector<vector<int>> mat(n, vector<int>(n, 0));
        for (auto x : mp)
        {
            int type = x.second.second.first;
            if (type == 0)
            {
                int index = x.second.first;
                for (int i = 0; i < n; i++)
                {
                    mat[index][i] = x.second.second.second;
                }
            }
            else
            {
                int index = x.second.first;
                for (int i = 0; i < n; i++)
                {
                    mat[i][index] = x.second.second.second;
                }
            }
        }

        long long ans = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                // cout << mat[i][j] << " ";
                ans += mat[i][j];
            }
            cout << endl;
        }
        // cout << ans << endl;
        return ans;
    }
};

int main()
{

    Solution leetcode2IDE;
    int n1 = 3;
    vector<vector<int>> queries1 = {{0, 0, 1}, {1, 2, 2}, {0, 2, 3}, {1, 0, 4}};
    int output_1 = 23;
    if (leetcode2IDE.matrixSumQueries(n1, queries1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    int n2 = 3;
    vector<vector<int>> queries2 = {{0, 0, 4}, {0, 1, 2}, {1, 0, 1}, {0, 2, 3}, {1, 2, 1}};
    int output_2 = 17;
    if (leetcode2IDE.matrixSumQueries(n2, queries2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}
