
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    int semiOrderedPermutation(vector<int> &nums)
    {
        int n = nums.size();
        int index_one = -1;
        int index_last = -1;
        int ans = 0;
        for (int i = 0; i < n; i++)
        {
            if (nums[i] == 1)
            {
                index_one = i;
            }
            if (nums[i] == nums.size())
            {
                index_last = i;
            }
        }
        // cout << index_one << " " << index_last << endl;
        if (index_one < index_last)
        {
            ans += index_one + (n - index_last - 1);
        }
        else
        {
            ans += (n - 1 - index_last) + index_one - 1;
        }
        // cout << ans << endl;
        return ans;
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<int> nums1 = {2, 1, 4, 3};
    int output_1 = 2;
    if (leetcode2IDE.semiOrderedPermutation(nums1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<int> nums2 = {2, 4, 1, 3};
    int output_2 = 3;
    if (leetcode2IDE.semiOrderedPermutation(nums2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    vector<int> nums3 = {1, 3, 4, 2, 5};
    int output_3 = 0;
    if (leetcode2IDE.semiOrderedPermutation(nums3) == output_3)
    {
        cout << "Sample #3 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #3 : Wrong Answer" << endl;
    }

    return 0;
}
