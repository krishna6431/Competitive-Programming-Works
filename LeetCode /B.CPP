
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

#define ll long long
class Solution
{
public:
	long long maximumSumOfHeights(vector<int> &arr)
	{
		ll n = arr.size();
		long long ans = 0;
		for (int i = 0; i < arr.size(); i++)
		{
			vector<int>newarr(n);
			// vector<int>newbrr(n);
			newarr[i] = arr[i];
			// newbrr[i] = arr[i];
			for (int j = i - 1; j >= 0; j--)
			{
				newarr[j] = min(newarr[j + 1], arr[j]);
			}
			for (int j = i + 1; j < n; j++)
			{
				newarr[j] = min(newarr[j - 1], arr[j]);
			}
			ll temp = accumulate(newarr.begin(),newarr.end(),0ll);
			ans = max(ans,temp);
		}
		cout << ans << endl;
		return ans;
	}
};

int main()
{

	Solution leetcode2IDE;
	vector<int> maxHeights1 = {5, 3, 4, 1, 1};
	int output_1 = 13;
	if (leetcode2IDE.maximumSumOfHeights(maxHeights1) == output_1)
	{
		cout << "Sample #1 : Accepted" << endl;
	}
	else
	{
		cout << "Sample #1 : Wrong Answer" << endl;
	}

	vector<int> maxHeights2 = {6, 5, 3, 9, 2, 7};
	int output_2 = 22;
	if (leetcode2IDE.maximumSumOfHeights(maxHeights2) == output_2)
	{
		cout << "Sample #2 : Accepted" << endl;
	}
	else
	{
		cout << "Sample #2 : Wrong Answer" << endl;
	}

	vector<int> maxHeights3 = {3, 2, 5, 5, 2, 3};
	int output_3 = 18;
	if (leetcode2IDE.maximumSumOfHeights(maxHeights3) == output_3)
	{
		cout << "Sample #3 : Accepted" << endl;
	}
	else
	{
		cout << "Sample #3 : Wrong Answer" << endl;
	}

	return 0;
}
