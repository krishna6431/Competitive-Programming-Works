
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

class Solution
{
private:
    long long f(int idx, vector<int> &nums)
    {
        if (idx == nums.size())
        {
            return 1;
        }
        long long take = nums[idx] * f(idx + 1, nums);
        long long notTake = f(idx + 1, nums);
        cout << idx << " " << take << " " << notTake << endl;
        return max(take, notTake);
    }

public:
    long long maxStrength(vector<int> &nums)
    {
        long long ans = f(0, nums);
        cout << "ANS: " << ans << endl;
        return ans;
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<int> nums1 = {3, -1, -5, 2, 5, -9};
    int output_1 = 1350;
    if (leetcode2IDE.maxStrength(nums1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<int> nums2 = {4, 5, 4};
    int output_2 = 20;
    if (leetcode2IDE.maxStrength(nums2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}

// Accepted Approach
//  sort(nums.begin(), nums.end());
//  if (nums.size() == 1)
//      return nums[0];
//  long long cnt = 0;
//  for (auto x : nums)
//  {
//      if (x < 0)
//          cnt++;
//  }
//  if (cnt & 1)
//  {
//      long long ans = 1;
//      long long idx = nums.size();
//      for (int i = 0; i < nums.size(); i++)
//      {
//          if (nums[i] >= 0)
//          {
//              idx = i;
//              break;
//          }
//      }
//      sort(nums.begin(), nums.begin() + idx, greater<int>());

//     for (int i = 1; i < nums.size(); i++)
//     {
//         if (nums[i] != 0)
//         {
//             ans *= nums[i];
//         }
//     }
//     // cout << ans << endl;
//     if (ans == 1)
//     {
//         if (find(nums.begin(), nums.end(), 1) == nums.end())
//         {
//             return 0;
//         }
//     }
//     return ans;
// }
// else
// {
//     long long ans = 1;
//     for (int i = 0; i < nums.size(); i++)
//     {
//         if (nums[i] != 0)
//         {
//             ans *= nums[i];
//         }
//     }
//     if (ans == 1)
//     {
//         if (find(nums.begin(), nums.end(), 1) == nums.end())
//         {
//             return 0;
//         }
//     }

//     return ans;
// }