
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;
#define ll long long
class Solution
{
public:
    int maxSubarrays(vector<int> &nums)
    {
        ll n = nums.size();
        ll prefix[n + 1];
        prefix[0] = LLONG_MAX;
        for (int i = 0; i < n; i++)
        {
            prefix[i + 1] = (prefix[i] & nums[i]);
        }
        ll finalPrefix = prefix[n - 1];
        ll ans = LLONG_MAX;
        ll res = 0;
        for (int i = 0; i < n; i++)
        {
            ans = (ans & nums[i]);
            if (ans == finalPrefix)
            {
                res++;
                ans = LLONG_MAX;
            }
        }
        cout << res << endl;
        if (res == 0)
            return 1;
        return res;
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<int> nums1 = {1, 0, 2, 0, 1, 2};
    int output_1 = 3;
    if (leetcode2IDE.maxSubarrays(nums1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<int> nums2 = {5, 7, 1, 3};
    int output_2 = 1;
    if (leetcode2IDE.maxSubarrays(nums2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}
