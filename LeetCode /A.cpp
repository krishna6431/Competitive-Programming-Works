
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;
#define ll long long
class Solution
{
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>> &grid)
    {
        vector<int> ans;
        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[0].size(); j++)
            {
                ans.push_back(grid[i][j]);
            }
        }
        ll sum = accumulate(ans.begin(), ans.end(), 0ll);
        ll repeating;
        sort(ans.begin(), ans.end());
        for (int i = 0; i < ans.size() - 1; i++)
        {
            if (ans[i] == ans[i + 1])
            {
                repeating = ans[i];
                break;
            }
        }
        ll n = grid.size() * grid.size();
        ll total = (n) * (n + 1) / 2;
        cout << repeating << " " << (int)(total - (sum - repeating)) << endl;
        return {(int)repeating, (int)(total - (sum - repeating))};
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<vector<int>> grid1 = {{1, 3}, {2, 2}};
    vector<int> output_1 = {2, 4};
    if (leetcode2IDE.findMissingAndRepeatedValues(grid1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<vector<int>> grid2 = {{9, 1, 7}, {8, 9, 2}, {3, 4, 6}};
    vector<int> output_2 = {9, 5};
    if (leetcode2IDE.findMissingAndRepeatedValues(grid2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}
