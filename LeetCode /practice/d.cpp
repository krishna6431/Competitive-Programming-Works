
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

#define ll long long
class Solution
{
private:
    long long solve(int i,int cnt,string s, long long maxSum, int k,map<char,int>&mp)
    {   
       
        int take =  solve(i+1,cnt+1,s,maxSum,k,mp);
        int notTake = solve(i+1,cnt,s,maxSum,k,mp);

        return take + notTake;
    }
public:
    const int MOD = 1000000007;

    int countKSubsequencesWithMaxBeauty(string s, int k)
    {
        if(k > 26){
            return 0;
        }
        map<char, int> mp;
        for(auto x : s){
            mp[x]++;
        }
        long long maxSum = 0;
        vector<int>count;
        for(auto x : mp){
            count.push_back(x.second);
        }
        if(count.size() < k) return 0;
        sort(count.begin(), count.end(),greater<int>());
        for(int i = 0 ; i < k ; i++){
            maxSum += count[i];
        }
        vector<char> v;
        for(char i = 'a' ; i < 'z' ; i++){
            if(mp[i] > 0){
                v.push_back(i);
            }
        }
        if(v.size() < k) return 0;
        cout << maxSum << endl;
        long long ans = solve(0,0,s,maxSum,k,mp);
        return 0;
    }
};

int main()
{

    Solution leetcode2IDE;
    string s1 = "bcca";
    int k1 = 2;
    int output_1 = 4;
    if (leetcode2IDE.countKSubsequencesWithMaxBeauty(s1, k1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    string s2 = "abbcd";
    int k2 = 4;
    int output_2 = 2;
    if (leetcode2IDE.countKSubsequencesWithMaxBeauty(s2, k2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}
