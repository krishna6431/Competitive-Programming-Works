
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

int dp[1005];
class Solution
{
private:
    int f(int idx, vector<int> &nums, int target)
    {
        if (idx == nums.size() - 1)
            return 0;
        else if (idx >= nums.size())
            return -1e9;
        int ans = -1e9;
        if (dp[idx] != -1)
            return dp[idx];
        for (int i = 1; i < nums.size(); i++)
        {
            int take = -1e9;
            if (idx + i <= nums.size() - 1)
            {
                if (abs(nums[idx] - nums[idx + i]) <= target)
                {
                    take = 1 + f(idx + i, nums, target);
                }
            }
            ans = max(ans, take);
        }
        return dp[idx] = ans;
    }

public:
    int maximumdp(vector<int> &nums, int target)
    {

        memset(dp, -1, sizeof(dp));
        int ans = f(0, nums, target);
        cout << ans << endl;
        if (ans == -1e9)
            return -1;
        if (ans < 0)
            return -1;
        return ans;
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<int> nums1 = {1, 3, 6, 4, 1, 2};
    int target1 = 2;
    int output_1 = 3;
    if (leetcode2IDE.maximumdp(nums1, target1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<int> nums2 = {1, 3, 6, 4, 1, 2};
    int target2 = 3;
    int output_2 = 5;
    if (leetcode2IDE.maximumdp(nums2, target2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    vector<int> nums3 = {1, 3, 6, 4, 1, 2};
    int target3 = 0;
    int output_3 = -1;
    if (leetcode2IDE.maximumdp(nums3, target3) == output_3)
    {
        cout << "Sample #3 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #3 : Wrong Answer" << endl;
    }
    vector<int> nums4 = {0, 1};
    int target4 = 1;
    int output_4 = 1;
    if (leetcode2IDE.maximumdp(nums4, target4) == output_4)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}
