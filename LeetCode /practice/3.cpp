
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

long long mod = 1e9 + 7;
class Solution
{
public:
    int numberOfGoodSubarraySplits(vector<int> &nums)
    {
        vector<int> idx;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] == 1)
                idx.push_back(i);
        }
        long long ans = 1;
        for (int i = 1; i < idx.size(); i++)
        {
            ans = ((ans % mod) * ((idx[i] - idx[i - 1]) % mod)) % mod;
        }
        if (idx.size() == 0)
            return 0;
        return (int)(ans % mod);
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<int> nums1 = {0, 1, 0, 0, 1};
    int output_1 = 3;
    if (leetcode2IDE.numberOfGoodSubarraySplits(nums1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<int> nums2 = {0, 1, 0};
    int output_2 = 1;
    if (leetcode2IDE.numberOfGoodSubarraySplits(nums2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    return 0;
}
