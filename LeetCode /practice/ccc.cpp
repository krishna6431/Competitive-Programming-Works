
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

int dp[100005][2];
class Solution
{
private:
    int f(int idx, vector<int> &nums1, vector<int> &nums2, int prev)
    {
        if (idx == nums1.size())
            return 0;
        if (dp[idx][prev] != -1)
            return dp[idx][prev];
        int opt1 = -1e9, opt2 = -1e9, opt3 = -1e9, opt4 = -1e9;
        if (prev == 0)
        {
            if (nums1[idx] >= nums1[idx - 1])
            {
                opt1 = 1 + f(idx + 1, nums1, nums2, 0);
            }
            if (nums2[idx] >= nums1[idx - 1])
            {
                opt2 = 1 + f(idx + 1, nums1, nums2, 1);
            }
        }
        else
        {
            if (nums1[idx] >= nums2[idx - 1])
            {
                opt3 = 1 + f(idx + 1, nums1, nums2, 0);
            }
            if (nums2[idx] >= nums2[idx - 1])
            {
                opt4 = 1 + f(idx + 1, nums1, nums2, 1);
            }
        }
        bool flag = false;
        if (opt1 == -1e9 and opt2 == -1e9 and opt3 == -1e9 and opt4 == -1e9)
        {
            flag = true;
        }
        int opt5 = -1e9;
        int opt6 = -1e9;
        if (flag)
        {
            opt5 = f(idx + 1, nums1, nums2, 0);
            opt6 = f(idx + 1, nums1, nums2, 1);
        }

        return dp[idx][prev] = max({opt1, opt2, opt3, opt4, opt5, opt6});
    }

public:
    int maxNonDecreasingLength(vector<int> &nums1, vector<int> &nums2)
    {
        memset(dp, -1, sizeof(dp));
        nums1.insert(nums1.begin(), -1);
        nums2.insert(nums2.begin(), -1);
        int ans1 = f(1, nums1, nums2, 0);
        int ans2 = f(1, nums1, nums2, 1);
        // cout << ans << endl
        // return ans;
        // cout << ans1 << " " << ans2 << endl;
        return max(ans1, ans2);
    }
};
int main()
{

    Solution leetcode2IDE;
    vector<int> nums11 = {5, 16, 15};
    vector<int> nums21 = {12, 1, 4};
    int output_1 = 2;
    if (leetcode2IDE.maxNonDecreasingLength(nums11, nums21) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<int> nums12 = {1, 3, 2, 1};
    vector<int> nums22 = {2, 2, 3, 4};
    int output_2 = 4;
    if (leetcode2IDE.maxNonDecreasingLength(nums12, nums22) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    vector<int> nums13 = {1, 1};
    vector<int> nums23 = {2, 2};
    int output_3 = 2;
    if (leetcode2IDE.maxNonDecreasingLength(nums13, nums23) == output_3)
    {
        cout << "Sample #3 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #3 : Wrong Answer" << endl;
    }

    return 0;
}
