
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    int minimumBeautifulSubstrings(string s)
    {
        vector<string> v;
        v.push_back("11110100001001");
        v.push_back("110000110101");
        v.push_back("1001110001");
        v.push_back("1111101");
        v.push_back("11001");
        v.push_back("101");
        v.push_back("1");

        set<int> block;
        int count = 0;
        int largest = 0;
        for (int j = 0; j < v.size(); j++)
        {

            while (s.find(v[j]) != string::npos)
            {
                if (s.find(v[j]) != string::npos)
                {
                    size_t found = s.find(v[j]);
                    int flag = false;
                    largest += v[j].size();
                    for (int k = found; k < found + v[j].size(); k++)
                    {
                        if (block.find(k) != block.end())
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                    {
                        for (int k = found; k < found + v[j].size(); k++)
                        {
                            s[k] = 'a';
                            block.insert(k);
                        }
                        if (!flag)
                        {
                            // cout << v[j] << endl;
                            count++;
                        }
                    }
                }
            }
        }
        if (count == 0)
            return -1;
        cout << largest << endl;
        cout << s.size() << endl;
        bool ok = false;
        for (int i = 0; i < s.size(); i++)
        {
            if (block.find(i) == block.end() and s[i] == '0')
            {
                ok = true;
            }
        }
        if (block.size() != s.size() and ok)
        {
            return count + (s.size() - largest);
        }

        for (int i = 0; i < s.size(); i++)
        {

            if (block.find(i) == block.end() and s[i] == '1')
            {
                count++;
            }
        }
        return count;
    }
};

int main()
{

    Solution leetcode2IDE;
    string s1 = "1011";
    int output_1 = 2;
    if (leetcode2IDE.minimumBeautifulSubstrings(s1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    string s2 = "111";
    int output_2 = 3;
    if (leetcode2IDE.minimumBeautifulSubstrings(s2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    string s3 = "10111001111101";
    int output_3 = 6;
    if (leetcode2IDE.minimumBeautifulSubstrings(s3) == output_3)
    {
        cout << "Sample #3 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #3 : Wrong Answer" << endl;
    }

    return 0;
}
