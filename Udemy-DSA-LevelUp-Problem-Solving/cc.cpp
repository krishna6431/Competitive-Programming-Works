
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;

class Solution
{
private:
    int n;
    vector<vector<int>> dist;
    vector<pair<int, int>> directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

    bool isValid(int r, int c)
    {
        return r >= 0 && r < n && c >= 0 && c < n;
    }

    void bfs(vector<vector<int>> &grid)
    {
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(n, vector<bool>(n, false));
        for (int r = 0; r < n; ++r)
        {
            for (int c = 0; c < n; ++c)
            {
                if (grid[r][c] == 1)
                {
                    dist[r][c] = 0;
                    q.push({r, c});
                    visited[r][c] = true;
                }
            }
        }

        while (!q.empty())
        {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();

            for (const auto &dir : directions)
            {
                int nr = r + dir.first;
                int nc = c + dir.second;
                if (isValid(nr, nc) && !visited[nr][nc])
                {
                    visited[nr][nc] = true;
                    dist[nr][nc] = min(dist[nr][nc], dist[r][c] + 1);
                    q.push({nr, nc});
                }
            }
        }
    }

    bool check(int mid)
    {
        vector<vector<int>> visited(dist.size(), vector<int>(dist[0].size(), 0));
        queue<pair<int, int>> q;
        q.push({0, 0});
        visited[0][0] = 1;
        int ans = dist[0][0];

        while (!q.empty())
        {
            int r = q.front().first;
            int c = q.front().second;
            q.pop();

            for (auto &dir : directions)
            {
                int nr = r + dir.first;
                int nc = c + dir.second;
                if (isValid(nr, nc) && !visited[nr][nc] and dist[nr][nc] >= mid)
                {
                    q.push({nr, nc});
                    visited[nr][nc] = 1;
                    if (nr == n - 1 and nc == n - 1)
                        return true;
                }
            }
        }
        return false;
    }

public:
    int maximumSafenessFactor(vector<vector<int>> &grid)
    {
        n = grid.size();
        dist.assign(n, vector<int>(n, 1e9));
        bfs(grid);

        for (auto x : dist)
        {
            for (auto y : x)
            {
                cout << y << " ";
            }
            cout << endl;
        }

        int start = 0, end = 2 * n;
        int ans = 0;
        while (start <= end)
        {
            int mid = start + (end - start) / 2;
            if (check(mid))
            {
                ans = max(ans, mid);
                start = mid + 1;
            }
            else
            {
                end = mid - 1;
            }
        }

        return ans;
    }
};

int main()
{

    Solution leetcode2IDE;
    vector<vector<int>> grid1 = {{1, 0, 0}, {0, 0, 0}, {0, 0, 1}};
    int output_1 = 0;
    if (leetcode2IDE.maximumSafenessFactor(grid1) == output_1)
    {
        cout << "Sample #1 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #1 : Wrong Answer" << endl;
    }

    vector<vector<int>> grid2 = {{1, 1, 1}, {0, 1, 1}, {0, 0, 0}};
    int output_2 = 0;
    if (leetcode2IDE.maximumSafenessFactor(grid2) == output_2)
    {
        cout << "Sample #2 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #2 : Wrong Answer" << endl;
    }

    vector<vector<int>> grid3 = {{0, 0, 0, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {1, 0, 0, 0}};
    int output_3 = 2;
    if (leetcode2IDE.maximumSafenessFactor(grid3) == output_3)
    {
        cout << "Sample #3 : Accepted" << endl;
    }
    else
    {
        cout << "Sample #3 : Wrong Answer" << endl;
    }

    return 0;
}
